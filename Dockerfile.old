# Use an official Python runtime as a base image
FROM python:3.10-slim AS build

# Set environment variables to production
# Set build-time environment variables
ENV PYTHONFAULTHANDLER=1 \
    PYTHONHASHSEED=random \
    PYTHONUNBUFFERED=1 \
    PIP_NO_CACHE_DIR=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1 \
    PIP_DEFAULT_TIMEOUT=100 \
    DEBIAN_FRONTEND=noninteractive \
    PLAYWRIGHT_BROWSERS_PATH=/ms-playwright \
    PYTHON_ENV=production \
    DISPLAY=:99

ARG APP_HOME=/app
ARG PYTHON_VERSION=3.10
ARG INSTALL_TYPE=default
ARG ENABLE_GPU=false
ARG TARGETARCH


# Add Maintainer Info
LABEL maintainer="Prokopis Antoniadis"
LABEL description="üî•üï∑Ô∏è Crawl4AI: LLM Web Crawler & scraper"
LABEL version="1.0"

RUN apt-get update && apt-get install -y --no-install-recommends \
    fonts-liberation \
    ca-certificates \
    lsof \
    # Add build dependencies for madoka
    build-essential \
    curl \
    wget \
    gnupg \
    cmake \
    gcc \
    g++ \
    pkg-config \
    python3-dev \
    libjpeg-dev \
    supervisor \
    && apt-get clean \ 
    && rm -rf /var/lib/apt/lists/*

# Install minimal system dependencies for Playwright and Python
RUN apt-get update -y && \
    apt-get upgrade -y && \
    apt-get install -y --no-install-recommends \
    libnss3 \
    libxcomposite1 \
    libxcursor1 \
    libxdamage1 \
    libxrandr2 \
    libdrm2 \
    libgbm1 \
    libxss1 \
    libasound2 \
    libatk1.0-0 \
    libatk-bridge2.0-0 \
    libgtk-3-0 \
    xvfb \
    x11vnc \
    git \
    curl fonts-liberation ca-certificates lsof \
    && git clone https://github.com/novnc/noVNC /opt/noVNC \
    && git clone https://github.com/novnc/websockify /opt/noVNC/utils/websockify \
    && apt-get clean && rm -rf /var/lib/apt/lists/*

# RUN apt-get update && apt-get dist-upgrade -y \
#     && rm -rf /var/lib/apt/lists/*

# RUN if [ "$ENABLE_GPU" = "true" ] && [ "$TARGETARCH" = "amd64" ] ; then \
#     apt-get update && apt-get install -y --no-install-recommends \
#     nvidia-cuda-toolkit \
#     && apt-get clean \ 
#     && rm -rf /var/lib/apt/lists/* ; \
# else \
#     echo "Skipping NVIDIA CUDA Toolkit installation (unsupported platform or GPU disabled)"; \
# fi

# RUN if [ "$TARGETARCH" = "arm64" ]; then \
#     echo "ü¶æ Installing ARM-specific optimizations"; \
#     apt-get update && apt-get install -y --no-install-recommends \
#     libopenblas-dev \
#     && apt-get clean \ 
#     && rm -rf /var/lib/apt/lists/*; \
# elif [ "$TARGETARCH" = "amd64" ]; then \
#     echo "üñ•Ô∏è Installing AMD64-specific optimizations"; \
#     apt-get update && apt-get install -y --no-install-recommends \
#     libomp-dev \
#     && apt-get clean \ 
#     && rm -rf /var/lib/apt/lists/*; \
# else \
#     echo "Skipping platform-specific optimizations (unsupported platform)"; \
# fi

# Create a non-root user and group
RUN groupadd -r appuser && useradd --no-log-init -r -g appuser appuser

# Create and set permissions for appuser home directory
RUN mkdir -p /home/appuser && chown -R appuser:appuser /home/appuser

# Set the working directory inside the container
WORKDIR ${APP_HOME}

# Copy the requirements file and install Python dependencies
# Copy supervisor config first (might need root later, but okay for now)
# COPY supervisord.conf .

COPY requirements.txt .
COPY config.yml .

RUN pip install --no-cache-dir -r requirements.txt && \
    pip install --no-cache-dir playwright

RUN pip install --no-cache-dir --upgrade pip && \
    python -c "import crawl4ai; print('‚úÖ crawl4ai is ready to rock!')" && \
    python -c "from playwright.sync_api import sync_playwright; print('‚úÖ Playwright is feeling dramatic!')"


# RUN crawl4ai-setup

# https://playwright.dev/docs/browsers
# Install only the required Playwright browser (Chromium)
# Install and verify Playwright
RUN playwright install --with-deps && \
    python -c "from playwright.sync_api import sync_playwright; \
    with sync_playwright() as p: \
        browser = p.chromium.launch(); \
        browser.close(); \
        print('‚úÖ Playwright browser verification successful!')"

# Create necessary directories and set permissions before switching to non-root user
RUN mkdir -p /home/appuser/.cache /ms-playwright && \
    chown -R appuser:appuser /home/appuser /ms-playwright /app

RUN crawl4ai-doctor

# RUN mkdir -p /home/appuser/.cache/ms-playwright \
#     && cp -r /root/.cache/ms-playwright/chromium-* /home/appuser/.cache/ms-playwright/ \
#     && chown -R appuser:appuser /home/appuser/.cache/ms-playwright

# Change ownership of the application directory to the non-root user
RUN chown -R appuser:appuser ${APP_HOME}

# Copy the application code into the container
COPY --chown=appuser:appuser . .

# Expose the port your FastAPI app will run on
EXPOSE 8000 9222 6080

# Healthcheck
HEALTHCHECK --interval=30s --timeout=30s --start-period=5s --retries=3 \
 CMD bash -c '\
    MEM=$(free -m | awk "/^Mem:/{print \$2}"); \
    if [ $MEM -lt 2048 ]; then \
        echo "‚ö†Ô∏è Warning: Less than 2GB RAM available! Your container might need a memory boost! üöÄ"; \
        exit 1; \
    fi && \
    curl -f http://localhost:8000/health || exit 1'


# Switch to the non-root user before starting the application
USER appuser

# Set environment variables to ptoduction
ENV PYTHON_ENV=production 

# Command to run the application
# CMD ["uvicorn", "server:app", "--host", "0.0.0.0", "--port", "8000", "--ws", "websockets"]
# CMD ["sh", "-c", "Xvfb :99 -screen 0 1280x720x24 & export DISPLAY=:99 && uvicorn server:app --host 0.0.0.0 --port 8000 --ws websockets"]
# gunicorn server:app -w 4 -k uvicorn.workers.UvicornWorker -b 0.0.0.0:8000
CMD ["sh", "-c", "Xvfb :99 -screen 0 1280x720x24 & x11vnc -display :99 -nopw -forever -shared -rfbport 5900 -quiet & /opt/noVNC/utils/websockify/run 0.0.0.0:6080 0.0.0.0:5900 --web /opt/noVNC & uvicorn server:app --host 0.0.0.0 --port 8000 --ws websockets"]
# Start the application using supervisord
# CMD ["supervisord", "-c", "supervisord.conf"]
